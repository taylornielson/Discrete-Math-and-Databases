# Test 7 all depend on others except 1

#| output should be 
Dependency Graph
R0:R0,R1,R2,R3,R4
R1:R0,R1,R2,R3,R4
R2:R0,R1,R2,R3,R4
R3:R0,R1,R2,R3,R4
R4:R0,R1,R2,R3,R4
R5:R5
Reverse Dependency Graph
R0:R0,R1,R2,R3,R4
R1:R0,R1,R2,R3,R4
R2:R0,R1,R2,R3,R4
R3:R0,R1,R2,R3,R4
R4:R0,R1,R2,R3,R4
R5:R5
Strongly Connected Components :
{R0,R1,R2,R3,R4,}
{R5,}

|#
Schemes:
	alpha(cat,dog,fish)
	beta(cat,fish,bird,bunny)
	omega(bird)
	phi(bunny)
	zeta(cat,fish)
	delta(bunny, bird, zebra)

Facts:
	alpha('1','3','5').
	alpha('1','4','6').
	beta('1','5','2','4'). 
	beta('1','5','4','4').
	omega('2').
	phi('4').
	zeta('1','5').
	delta('4','2','8').

Rules:
	alpha(cat,dog,fish) :- alpha(cat,dog,fish),beta(cat,fish,bird,bunny),omega(bird),phi(bunny),zeta(cat,fish).
	beta(cat,fish,bird,bunny) :- alpha(cat,dog,fish),beta(cat,fish,bird,bunny),omega(bird),phi(bunny),zeta(cat,fish).
	omega(bird) :- alpha(cat,dog,fish),beta(cat,fish,bird,bunny),omega(bird),phi(bunny),zeta(cat,fish).
	phi(bunny) :- alpha(cat,dog,fish),beta(cat,fish,bird,bunny),omega(bird),phi(bunny),zeta(cat,fish).
	zeta(cat,fish) :- alpha(cat,dog,fish),beta(cat,fish,bird,bunny),omega(bird),phi(bunny),zeta(cat,fish).
	delta(bunny, bird, zebra) :- delta(bunny, bird, zebra).
	
Queries:
    snap('67890','Van Pelt','34 Pear','555-5678')?
    snap(S,N,A,P)?
    NameHasID('Snoopy',Id)?
    NameHasID(Name,'67890')?