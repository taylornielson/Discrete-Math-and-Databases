# Test 9 multiple of the same rule depended on (beta).
#| output should be 
Dependency Graph
R0:R0
R1:R1
Reverse Dependency Graph
R0:R0
R1:R1
Strongly Connected Components :
{R0,}
{R1,}
|#
Schemes:
	alpha(cat,dog,fish)
	beta(cat,fish,owl,bird,bunny)
	omega(bird)
	phi(bunny)
	zeta(cat,fish)
	delta(bunny, bird, zebra)

Facts:
	alpha('1','3','5').
	alpha('1','4','6').
	beta('1','5','0','2','4'). 
	beta('1','5','7','4','4').
	omega('2').
	phi('4').
	zeta('1','5').
	delta('4','2','8').

Rules:
	alpha(cat,dog,fish) :- alpha(cat,dog,fish).
	beta(cat,fish,owl,bird,bunny) :- beta(cat,fish,owl,bird,bunny), beta(cat,fish,owl,bird,bunny), beta(cat,fish,owl,bird,bunny), beta(cat,fish,owl,bird,bunny), beta(cat,fish,owl,bird,bunny).

Queries:
    snap('67890','Van Pelt','34 Pear','555-5678')?
    snap(S,N,A,P)?
    NameHasID('Snoopy',Id)?
    NameHasID(Name,'67890')?